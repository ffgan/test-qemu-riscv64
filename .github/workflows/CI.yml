name: test qemu
on:
  push:
    paths:
      - '**'
      - '!.github/**'
      - '.github/workflows/CI.yml'
  pull_request:
    paths:
      - '**'
      - '!.github/**'
      - '.github/workflows/CI.yml'
  workflow_dispatch:

jobs:
  build-riscv:
    runs-on: ubuntu-22.04
    timeout-minutes: 9999999
    steps:
    - name: checkout code 
      uses: actions/checkout@v4
      with:
          repository: ffgan/ceph
          ref: feature/allow_riscv64_compile
          submodules: 'true'
      
    - name: setup qemu
      uses: docker/setup-qemu-action@v3
      with:
        platforms: riscv64
        
    - name: setup docker  Buildx
      uses: docker/setup-buildx-action@v3
              
    - name: start container
      run: |
        docker run --platform linux/riscv64 -d --name u22 -v ./:/src ubuntu:22.04 bash -c "while true; do sleep 30; done"
        
    - name: ls ceph
      run: |
        docker exec u22 ls -la /src
  
    - name: Show uname info
      run: |
        docker exec u22 uname -a
        docker exec u22 cat /etc/os-release

    - name: apt update && apt install 
      run: |
        docker exec u22 apt-get update
        docker exec u22 apt-get install -y sudo vim git curl wget python3-dev build-essential neofetch

    - name: neofetch
      run: |
        docker exec u22 neofetch

    - name: install dep
      run: | 
        docker exec u22 bash -c "cd /src && git config --global safe.directory '*' && FOR_MAKE_CHECK=true ./install-deps.sh"

    - name: do_cmake
    
      run: | 
        docker exec u22 bash -c "cd /src && export NODE_OPTIONS=--max-old-space-size=16384 && rm -rf build;ARGS='-DWITH_MGR_DASHBOARD_FRONTEND=OFF' ./do_cmake.sh"


    - name: ninja build
      continue-on-error: true
      run: |
        docker exec u22 bash -c "cd /src && export  NODE_OPTIONS=--max-old-space-size=8192 && ninja -j4 -k0"

    - name: ninja check
      continue-on-error: true
      run: |
        docker exec u22 bash -c "cd /src && export  NODE_OPTIONS=--max-old-space-size=8192 && ninja check -j4 -k0"

    - name: ctest
      continue-on-error: true
      run: |
        docker exec u22 bash -c "cd /src/build && ctest -j4 -k0"

    - name: Upload log
      uses: actions/upload-artifact@v4
      with:
        name: logs.zip
        path: ./build/Testing/Temporary/*.log
        
    - name: post clean
      run: |
        docker stop u22
        docker rm u22
        docker rmi ubuntu
    